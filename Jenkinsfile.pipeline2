pipeline {
    agent any
    parameters {
        booleanParam(name: 'BUILD_SERVICES', defaultValue: true, description: 'Build backend-webapi')
        booleanParam(name: 'BUILD_SQL', defaultValue: true, description: 'Build sql-service')
        booleanParam(name: 'BUILD_METADATA', defaultValue: true, description: 'Build metadata-service')
        string(name: 'RELEASE_VERSION', defaultValue: '25.2.0', description: 'Release Version')
        booleanParam(name: 'PUSH_TO_ECR', defaultValue: true, description: 'Push images to AWS ECR')
        booleanParam(name: 'UPLOAD_JARS', defaultValue: false, description: 'Upload JAR files to S3')
    }
    environment {
        ECR_REGISTRY = '969258966375.dkr.ecr.eu-north-1.amazonaws.com'
        ECR_REPO = 'marketmap-backend'
        DOCKER_MANIFEST_FILE = "D:/MarketMapBuilds/${params.RELEASE_VERSION}/DockerBuildInfo.txt"
    }
    stages {
        stage('Show Selections') {
            steps {
                script {
                    echo "========= Pipeline 2 Configuration ========="
                    echo "Build Services   : ${params.BUILD_SERVICES}"
                    echo "Build SQL        : ${params.BUILD_SQL}"
                    echo "Build Metadata   : ${params.BUILD_METADATA}"
                    echo "Release Version  : ${params.RELEASE_VERSION}"
                    echo "Push to ECR      : ${params.PUSH_TO_ECR}"
                    echo "Upload JARs      : ${params.UPLOAD_JARS}"
                    echo "============================================"
                }
            }
        }
        stage('Prepare Workspace') {
            steps {
                bat "echo # Docker Build Manifest for RELEASE ${params.RELEASE_VERSION} > ${env.DOCKER_MANIFEST_FILE}"
                bat "echo # Last Updated: %date% %time% >> ${env.DOCKER_MANIFEST_FILE}"
            }
        }
        stage('Build Docker Image - Services') {
            when { expression { return params.BUILD_SERVICES } }
            steps {
                script {
                    def jar = bat(script: "dir /b D:/MarketMapBuilds/${params.RELEASE_VERSION}/CombinedBuild/backend-webapi.*.jar", returnStdout: true).trim()
                    def tag = jar.replace("backend-webapi.", "").replace(".jar", "")
                    echo "Using tag: ${tag} for backend-webapi"
                    bat "copy D:/MarketMapBuilds/${params.RELEASE_VERSION}/CombinedBuild/${jar} ${WORKSPACE}/docker/backend-webapi/backend-webapi.jar /Y"
                    bat "cd ${WORKSPACE}/docker/backend-webapi && docker build -t backend-webapi:${tag} ."
                    bat "echo backend-webapi:${tag} >> ${env.DOCKER_MANIFEST_FILE}"
                }
            }
        }
        stage('Build Docker Image - SQL') {
            when { expression { return params.BUILD_SQL } }
            steps {
                script {
                    def jar = bat(script: "dir /b D:/MarketMapBuilds/${params.RELEASE_VERSION}/CombinedBuild/sql-service.*.jar", returnStdout: true).trim()
                    def tag = jar.replace("sql-service.", "").replace(".jar", "")
                    echo "Using tag: ${tag} for sql-service"
                    bat "copy D:/MarketMapBuilds/${params.RELEASE_VERSION}/CombinedBuild/${jar} ${WORKSPACE}/docker/sql-service/sql-service.jar /Y"
                    bat "cd ${WORKSPACE}/docker/sql-service && docker build -t sql-service:${tag} ."
                    bat "echo sql-service:${tag} >> ${env.DOCKER_MANIFEST_FILE}"
                }
            }
        }
        stage('Build Docker Image - Metadata') {
            when { expression { return params.BUILD_METADATA } }
            steps {
                script {
                    def jar = bat(script: "dir /b D:/MarketMapBuilds/${params.RELEASE_VERSION}/CombinedBuild/metadata-service.*.jar", returnStdout: true).trim()
                    def tag = jar.replace("metadata-service.", "").replace(".jar", "")
                    echo "Using tag: ${tag} for metadata-service"
                    bat "copy D:/MarketMapBuilds/${params.RELEASE_VERSION}/CombinedBuild/${jar} ${WORKSPACE}/docker/metadata-service/metadata-service.jar /Y"
                    bat "cd ${WORKSPACE}/docker/metadata-service && docker build -t metadata-service:${tag} ."
                    bat "echo metadata-service:${tag} >> ${env.DOCKER_MANIFEST_FILE}"
                }
            }
        }
        stage('Push Docker Images to ECR') {
            when { expression { return params.PUSH_TO_ECR } }
            steps {
                withAWS(region: 'eu-north-1') {
                    bat "aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${env.ECR_REGISTRY}"
                    bat "python push_images.py ${env.DOCKER_MANIFEST_FILE} ${env.ECR_REGISTRY} ${env.ECR_REPO}"
                }
            }
        }
        stage('Upload JARs to S3') {
            when { expression { return params.UPLOAD_JARS } }
            steps {
                echo "TODO: Add S3 upload logic here."
            }
        }
    }
    post {
        success { echo '✔ Pipeline 2 completed successfully.' }
        failure { echo '✖ Pipeline 2 failed.' }
    }
}