pipeline {
    agent any

    parameters {
        booleanParam(name: 'BUILD_SERVICES', defaultValue: false, description: 'Build Docker image for Backend-WebAPI (Services)')
        booleanParam(name: 'BUILD_SQL', defaultValue: false, description: 'Build Docker image for SQL-Service')
        booleanParam(name: 'BUILD_METADATA', defaultValue: false, description: 'Build Docker image for Metadata-Service')
        string(name: 'RELEASE', defaultValue: '25.2.0', description: 'Release version (e.g., 25.2.0)')
        booleanParam(name: 'PUSH_TO_REGISTRY', defaultValue: false, description: 'Push built Docker images to AWS ECR')
        booleanParam(name: 'UPLOAD_JARS', defaultValue: false, description: 'Upload JARs to S3')
    }

    environment {
        BASE_DIR = "D:\\MarketMapBuilds"
        RELEASE_DIR = "${BASE_DIR}\\${params.RELEASE}\\CombinedBuild"
        DOCKER_DIR = "${WORKSPACE}\\docker"
        DOCKER_MANIFEST = "${BASE_DIR}\\${params.RELEASE}\\DockerBuildInfo.txt"
        AWS_REGION = "eu-north-1"
        ECR_REGISTRY = "969258966375.dkr.ecr.eu-north-1.amazonaws.com"
        ECR_REPO = "marketmap-backend"
        S3_BUCKET = "marketmap-jar-artifacts"
        AWS_CREDS = "aws-jenkins"
    }

    stages {
        stage('Prepare Docker Manifest') {
            steps {
                script {
                    if (!fileExists(RELEASE_DIR)) {
                        error "❌ Release folder does not exist: ${RELEASE_DIR}. Please run Pipeline 1 first."
                    }
                    bat """
                        echo # Docker Build Manifest for RELEASE ${params.RELEASE} > "${DOCKER_MANIFEST}"
                        echo # Last Updated: %DATE% %TIME% >> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Backend-WebAPI') {
                    when { expression { params.BUILD_SERVICES } }
                    steps {
                        script {
                            bat "dir /b \"${RELEASE_DIR}\\backend-webapi.*.jar\" > jar_name.txt"
                            def jarFile = readFile('jar_name.txt').trim()
                            def tag = jarFile.replace('backend-webapi.', '').replace('.jar', '')
                            echo "Building backend-webapi:${tag}"

                            bat """
                                copy "${RELEASE_DIR}\\${jarFile}" "${DOCKER_DIR}\\backend-webapi\\backend-webapi.jar" /Y
                                cd "${DOCKER_DIR}\\backend-webapi"
                                docker build -t backend-webapi:${tag} .
                                echo backend-webapi:${tag} >> "${DOCKER_MANIFEST}"
                            """
                        }
                    }
                }
                stage('SQL-Service') {
                    when { expression { params.BUILD_SQL } }
                    steps {
                        script {
                            bat "dir /b \"${RELEASE_DIR}\\sql-service.*.jar\" > jar_name.txt"
                            def jarFile = readFile('jar_name.txt').trim()
                            def tag = jarFile.replace('sql-service.', '').replace('.jar', '')
                            echo "Building sql-service:${tag}"

                            bat """
                                copy "${RELEASE_DIR}\\${jarFile}" "${DOCKER_DIR}\\sql-service\\sql-service.jar" /Y
                                cd "${DOCKER_DIR}\\sql-service"
                                docker build -t sql-service:${tag} .
                                echo sql-service:${tag} >> "${DOCKER_MANIFEST}"
                            """
                        }
                    }
                }
                stage('Metadata-Service') {
                    when { expression { params.BUILD_METADATA } }
                    steps {
                        script {
                            bat "dir /b \"${RELEASE_DIR}\\metadata-service.*.jar\" > jar_name.txt"
                            def jarFile = readFile('jar_name.txt').trim()
                            def tag = jarFile.replace('metadata-service.', '').replace('.jar', '')
                            echo "Building metadata-service:${tag}"

                            bat """
                                copy "${RELEASE_DIR}\\${jarFile}" "${DOCKER_DIR}\\metadata-service\\metadata-service.jar" /Y
                                cd "${DOCKER_DIR}\\metadata-service"
                                docker build -t metadata-service:${tag} .
                                echo metadata-service:${tag} >> "${DOCKER_MANIFEST}"
                            """
                        }
                    }
                }
            }
        }

        stage('Push to AWS ECR') {
            when { expression { params.PUSH_TO_REGISTRY } }
            steps {
                withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDS}") {
                    script {
                        echo "Logging in to AWS ECR..."
                        bat """
                            aws ecr get-login-password --region ${AWS_REGION} ^
                            | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                        """

                        echo "Pushing Docker images from DockerBuildInfo.txt..."
                        bat """
                            setlocal enabledelayedexpansion
                            for /f "usebackq delims=" %%i in ("${DOCKER_MANIFEST}") do (
                                echo %%i | findstr "#" >nul || (
                                    set image=%%i
                                    set tag=!image::=-!
                                    echo Pushing !image! as ${ECR_REGISTRY}/${ECR_REPO}-!tag!
                                    docker tag !image! ${ECR_REGISTRY}/${ECR_REPO}-!tag!
                                    docker push ${ECR_REGISTRY}/${ECR_REPO}-!tag!
                                )
                            )
                            endlocal
                        """
                    }
                }
            }
        }

        stage('Summary') {
            steps {
                echo "✅ Pipeline completed for Release ${params.RELEASE}."
            }
        }
    }

    post {
        failure { echo "❌ Pipeline failed." }
    }
}