pipeline {
    agent any

    parameters {
        booleanParam(name: 'BUILD_SERVICES', defaultValue: true, description: 'Build Services Docker Image')
        booleanParam(name: 'BUILD_SQL', defaultValue: true, description: 'Build SQL Docker Image')
        booleanParam(name: 'BUILD_METADATA', defaultValue: true, description: 'Build Metadata Docker Image')
        string(name: 'RELEASE_VERSION', defaultValue: '25.2.0', description: 'Release Version')
        booleanParam(name: 'PUSH_TO_ECR', defaultValue: true, description: 'Push Docker Images to AWS ECR')
        booleanParam(name: 'UPLOAD_JARS', defaultValue: false, description: 'Upload JARs to S3')
    }

    environment {
        BUILD_DIR = "D:\\MarketMapBuilds\\${params.RELEASE_VERSION}"
        DOCKER_INFO = "${BUILD_DIR}\\DockerBuildInfo.txt"
        AWS_ACCOUNT_ID = "969258966375"
        REGION = "eu-north-1"
    }

    stages {

        stage('Show Selections') {
            steps {
                script {
                    echo "========= Pipeline 2 Configuration ========="
                    echo "Build Services   : ${params.BUILD_SERVICES}"
                    echo "Build SQL        : ${params.BUILD_SQL}"
                    echo "Build Metadata   : ${params.BUILD_METADATA}"
                    echo "Release Version  : ${params.RELEASE_VERSION}"
                    echo "Push to ECR      : ${params.PUSH_TO_ECR}"
                    echo "Upload JARs      : ${params.UPLOAD_JARS}"
                    echo "============================================"
                }
            }
        }

        stage('Check for Dry Run') {
            steps {
                script {
                    if (!params.BUILD_SERVICES && !params.BUILD_SQL && !params.BUILD_METADATA) {
                        echo "Dry Run: No components selected. Exiting pipeline successfully."
                        currentBuild.result = 'SUCCESS'
                        return
                    }
                }
            }
        }

        stage('Prepare Workspace') {
            steps {
                bat """
                echo # Docker Build Manifest for RELEASE ${params.RELEASE_VERSION} > "${DOCKER_INFO}"
                echo # Last Updated: %date% %time% >> "${DOCKER_INFO}"
                """
            }
        }

        stage('Build Docker Image - Services') {
            when { expression { params.BUILD_SERVICES } }
            steps {
                script {
                    def jarName = powershell(
                        script: "(Get-ChildItem -Path '${BUILD_DIR}\\CombinedBuild' -Filter 'backend-webapi.*.jar' | Sort-Object LastWriteTime -Descending | Select-Object -First 1).Name",
                        returnStdout: true
                    ).trim()

                    if (!jarName) {
                        error "No backend-webapi JAR found in ${BUILD_DIR}\\CombinedBuild"
                    }

                    def tag = jarName.replace("backend-webapi.", "").replace(".jar", "")
                    echo "Using tag: ${tag} for backend-webapi"

                    bat """
                    copy "${BUILD_DIR}\\CombinedBuild\\${jarName}" "docker\\backend-webapi\\backend-webapi.jar" /Y
                    cd docker\\backend-webapi
                    docker build -t backend-webapi:${tag} .
                    echo backend-webapi:${tag} >> "${DOCKER_INFO}"
                    """
                }
            }
        }

        stage('Build Docker Image - SQL') {
            when { expression { params.BUILD_SQL } }
            steps {
                script {
                    def jarName = powershell(
                        script: "(Get-ChildItem -Path '${BUILD_DIR}\\CombinedBuild' -Filter 'sql-service.*.jar' | Sort-Object LastWriteTime -Descending | Select-Object -First 1).Name",
                        returnStdout: true
                    ).trim()

                    if (!jarName) {
                        error "No sql-service JAR found in ${BUILD_DIR}\\CombinedBuild"
                    }

                    def tag = jarName.replace("sql-service.", "").replace(".jar", "")
                    echo "Using tag: ${tag} for sql-service"

                    bat """
                    copy "${BUILD_DIR}\\CombinedBuild\\${jarName}" "docker\\sql-service\\sql-service.jar" /Y
                    cd docker\\sql-service
                    docker build -t sql-service:${tag} .
                    echo sql-service:${tag} >> "${DOCKER_INFO}"
                    """
                }
            }
        }

        stage('Build Docker Image - Metadata') {
            when { expression { params.BUILD_METADATA } }
            steps {
                script {
                    def jarName = powershell(
                        script: "(Get-ChildItem -Path '${BUILD_DIR}\\CombinedBuild' -Filter 'metadata-service.*.jar' | Sort-Object LastWriteTime -Descending | Select-Object -First 1).Name",
                        returnStdout: true
                    ).trim()

                    if (!jarName) {
                        error "No metadata-service JAR found in ${BUILD_DIR}\\CombinedBuild"
                    }

                    def tag = jarName.replace("metadata-service.", "").replace(".jar", "")
                    echo "Using tag: ${tag} for metadata-service"

                    bat """
                    copy "${BUILD_DIR}\\CombinedBuild\\${jarName}" "docker\\metadata-service\\metadata-service.jar" /Y
                    cd docker\\metadata-service
                    docker build -t metadata-service:${tag} .
                    echo metadata-service:${tag} >> "${DOCKER_INFO}"
                    """
                }
            }
        }

        stage('Push Docker Images to ECR') {
            when { expression { params.PUSH_TO_ECR } }
            steps {
                withAWS(region: "${REGION}", credentials: 'aws-jenkins') {
                    bat """
                    aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com
                    python push_images.py "${DOCKER_INFO}" "${AWS_ACCOUNT_ID}"
                    """
                }
            }
        }

        stage('Upload JARs to S3') {
            when { expression { params.UPLOAD_JARS } }
            steps {
                withAWS(region: "${REGION}", credentials: 'aws-jenkins') {
                    bat """
                    aws s3 sync "${BUILD_DIR}\\CombinedBuild" s3://marketmap-builds/${params.RELEASE_VERSION}/
                    """
                }
            }
        }

        stage('Summary') {
            steps {
                echo "Pipeline completed successfully!"
            }
        }
    }

    post {
        failure {
            echo "‚ùå Pipeline 2 failed."
        }
    }
}
