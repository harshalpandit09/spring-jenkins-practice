pipeline {
    agent any

    parameters {
        // ===== COMPONENTS =====
        booleanParam(name: 'BUILD_SERVICES', defaultValue: false, description: 'Build Docker image for Backend-WebAPI (Services)')
        booleanParam(name: 'BUILD_SQL', defaultValue: false, description: 'Build Docker image for SQL-Service')
        booleanParam(name: 'BUILD_METADATA', defaultValue: false, description: 'Build Docker image for Metadata-Service')

        // ===== RELEASE =====
        string(name: 'RELEASE', defaultValue: '25.2.0', description: 'Release version (e.g., 25.2.0)')

        // ===== OTHER OPTIONS =====
        booleanParam(name: 'PUSH_TO_REGISTRY', defaultValue: false, description: 'Push built Docker images to AWS ECR')
        booleanParam(name: 'UPLOAD_JARS', defaultValue: false, description: 'Upload JARs to S3')
    }

    environment {
        BASE_DIR = "D:\\MarketMapBuilds"
        RELEASE_DIR = "${BASE_DIR}\\${params.RELEASE}\\CombinedBuild"
        DOCKER_DIR = "${WORKSPACE}\\docker"
        DOCKER_MANIFEST = "${BASE_DIR}\\${params.RELEASE}\\DockerBuildInfo.txt"

        AWS_REGION = "eu-north-1" // Change to your AWS region
        ECR_URI = "969258966375.dkr.ecr.eu-north-1.amazonaws.com/marketmap-backend" // Replace <account_id> with your AWS account ID
        S3_BUCKET = "marketmap-jar-artifacts" // Replace with your S3 bucket name
    }

    stages {

        // ===== SHOW INPUTS =====
        stage('Show Selections') {
            steps {
                script {
                    echo "========= Pipeline 2 Configuration ========="
                    echo "Build Backend-WebAPI  : ${params.BUILD_SERVICES}"
                    echo "Build SQL-Service     : ${params.BUILD_SQL}"
                    echo "Build Metadata-Service: ${params.BUILD_METADATA}"
                    echo "Release Version       : ${params.RELEASE}"
                    echo "Push to ECR           : ${params.PUSH_TO_REGISTRY}"
                    echo "Upload JARs to S3     : ${params.UPLOAD_JARS}"
                    echo "============================================"
                }
            }
        }

        // ===== PREPARE =====
        stage('Prepare Workspace') {
            steps {
                script {
                    if (!fileExists(RELEASE_DIR)) {
                        error "❌ Release folder does not exist: ${RELEASE_DIR}. Please run Pipeline 1 first."
                    }
                    if (!params.BUILD_SERVICES && !params.BUILD_SQL && !params.BUILD_METADATA) {
                        echo "⚠ No components selected. Dry run only."
                        currentBuild.result = 'SUCCESS'
                        return
                    }

                    // Clear the Docker Manifest file
                    bat """
                        echo # Docker Build Manifest for RELEASE ${params.RELEASE} > "${DOCKER_MANIFEST}"
                        echo # Last Updated: %DATE% %TIME% >> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        // ===== SERVICES =====
        stage('Build Docker Image - Services') {
            when { expression { params.BUILD_SERVICES } }
            steps {
                script {
                    bat "dir /b \"${RELEASE_DIR}\\backend-webapi.*.jar\" > jar_name.txt"
                    def jarFile = readFile('jar_name.txt').trim()
                    def serviceTag = jarFile.replace('backend-webapi.', '').replace('.jar', '')
                    echo "Using tag: ${serviceTag} for backend-webapi"

                    bat """
                        copy "${RELEASE_DIR}\\${jarFile}" "${DOCKER_DIR}\\backend-webapi\\backend-webapi.jar" /Y
                        cd "${DOCKER_DIR}\\backend-webapi"
                        docker build -t backend-webapi:${serviceTag} .
                    """

                    bat """
                        echo backend-webapi:${serviceTag}>> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        // ===== SQL =====
        stage('Build Docker Image - SQL') {
            when { expression { params.BUILD_SQL } }
            steps {
                script {
                    bat "dir /b \"${RELEASE_DIR}\\sql-service.*.jar\" > jar_name.txt"
                    def jarFile = readFile('jar_name.txt').trim()
                    def sqlTag = jarFile.replace('sql-service.', '').replace('.jar', '')
                    echo "Using tag: ${sqlTag} for sql-service"

                    bat """
                        copy "${RELEASE_DIR}\\${jarFile}" "${DOCKER_DIR}\\sql-service\\sql-service.jar" /Y
                        cd "${DOCKER_DIR}\\sql-service"
                        docker build -t sql-service:${sqlTag} .
                    """

                    bat """
                        echo sql-service:${sqlTag}>> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        // ===== METADATA =====
        stage('Build Docker Image - Metadata') {
            when { expression { params.BUILD_METADATA } }
            steps {
                script {
                    bat "dir /b \"${RELEASE_DIR}\\metadata-service.*.jar\" > jar_name.txt"
                    def jarFile = readFile('jar_name.txt').trim()
                    def metaTag = jarFile.replace('metadata-service.', '').replace('.jar', '')
                    echo "Using tag: ${metaTag} for metadata-service"

                    bat """
                        copy "${RELEASE_DIR}\\${jarFile}" "${DOCKER_DIR}\\metadata-service\\metadata-service.jar" /Y
                        cd "${DOCKER_DIR}\\metadata-service"
                        docker build -t metadata-service:${metaTag} .
                    """

                    bat """
                        echo metadata-service:${metaTag}>> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        // ===== ECR PUSH =====
        stage('Push Docker Images to ECR') {
            when { expression { params.PUSH_TO_REGISTRY } }
            steps {
                script {
                    echo "Logging into AWS ECR..."
                    bat """
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URI}
                    """

                    // Push images conditionally
                    if (params.BUILD_SERVICES) {
                        def serviceTag = getImageTag('backend-webapi')
                        bat "docker tag backend-webapi:${serviceTag} ${ECR_URI}:backend-webapi-${serviceTag}"
                        bat "docker push ${ECR_URI}:backend-webapi-${serviceTag}"
                    }
                    if (params.BUILD_SQL) {
                        def sqlTag = getImageTag('sql-service')
                        bat "docker tag sql-service:${sqlTag} ${ECR_URI}:sql-service-${sqlTag}"
                        bat "docker push ${ECR_URI}:sql-service-${sqlTag}"
                    }
                    if (params.BUILD_METADATA) {
                        def metaTag = getImageTag('metadata-service')
                        bat "docker tag metadata-service:${metaTag} ${ECR_URI}:metadata-service-${metaTag}"
                        bat "docker push ${ECR_URI}:metadata-service-${metaTag}"
                    }
                }
            }
        }

        // ===== S3 UPLOAD =====
        stage('Upload JARs to S3') {
            when { expression { params.UPLOAD_JARS } }
            steps {
                script {
                    echo "Uploading JAR files to S3 bucket: ${S3_BUCKET}"
                    bat """
                        aws s3 cp "${RELEASE_DIR}\\backend-webapi.*.jar" s3://${S3_BUCKET}/${params.RELEASE}/
                        aws s3 cp "${RELEASE_DIR}\\sql-service.*.jar" s3://${S3_BUCKET}/${params.RELEASE}/
                        aws s3 cp "${RELEASE_DIR}\\metadata-service.*.jar" s3://${S3_BUCKET}/${params.RELEASE}/
                    """
                }
            }
        }

        // ===== SHOW BUILT IMAGES =====
        stage('List Built Docker Images') {
            steps {
                script {
                    echo "Listing Docker images for release ${params.RELEASE}..."
                    bat "docker images | findstr ${params.RELEASE} || echo No images found."
                }
            }
        }

        // ===== SUMMARY =====
        stage('Summary') {
            steps {
                echo "✅ Pipeline 2 completed successfully for Release: ${params.RELEASE}."
                echo "Docker build manifest stored at: ${DOCKER_MANIFEST}"
            }
        }
    }

    post {
        failure { echo "❌ Pipeline 2 failed." }
    }
}

// ===== Helper Method to get latest image tag =====
def getImageTag(component) {
    def jarFile = bat(
        script: "dir /b \"${RELEASE_DIR}\\${component}.*.jar\"",
        returnStdout: true
    ).trim()
    return jarFile.replace("${component}.", "").replace(".jar", "")
}