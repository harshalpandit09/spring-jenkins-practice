pipeline {
    agent any
    environment {
        AWS_REGION = 'eu-north-1'
        AWS_CREDENTIAL_ID = 'aws-credentials-id'  // Replace with your Jenkins AWS credential ID
        ECR_REGISTRY = '969258966375.dkr.ecr.eu-north-1.amazonaws.com'
        ECR_REPOSITORY = 'marketmap-backend'
        DOCKER_MANIFEST = "D:\\MarketMapBuilds\\${params.RELEASE_VERSION}\\DockerBuildInfo.txt"
    }
    parameters {
        string(name: 'RELEASE_VERSION', defaultValue: '25.2.0', description: 'Release Version')
        booleanParam(name: 'BUILD_SERVICES', defaultValue: true, description: 'Build Services')
        booleanParam(name: 'BUILD_SQL', defaultValue: true, description: 'Build SQL')
        booleanParam(name: 'BUILD_METADATA', defaultValue: true, description: 'Build Metadata')
        booleanParam(name: 'PUSH_TO_ECR', defaultValue: true, description: 'Push images to AWS ECR')
        booleanParam(name: 'UPLOAD_JARS', defaultValue: false, description: 'Upload JARs to S3')
    }
    stages {
        stage('Show Selections') {
            steps {
                echo "========= Pipeline 2 Configuration ========="
                echo "Build Services   : ${params.BUILD_SERVICES}"
                echo "Build SQL        : ${params.BUILD_SQL}"
                echo "Build Metadata   : ${params.BUILD_METADATA}"
                echo "Release Version  : ${params.RELEASE_VERSION}"
                echo "Push to ECR      : ${params.PUSH_TO_ECR}"
                echo "Upload JARs      : ${params.UPLOAD_JARS}"
                echo "============================================"
            }
        }

        stage('Prepare Workspace') {
            steps {
                script {
                    bat """
                        echo # Docker Build Manifest for RELEASE ${params.RELEASE_VERSION} > "${DOCKER_MANIFEST}"
                        echo # Last Updated: %DATE% %TIME% >> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    if (params.BUILD_SERVICES) {
                        buildDockerImage('backend-webapi')
                    }
                    if (params.BUILD_SQL) {
                        buildDockerImage('sql-service')
                    }
                    if (params.BUILD_METADATA) {
                        buildDockerImage('metadata-service')
                    }
                }
            }
        }

        stage('Push Docker Images to ECR') {
            when { expression { params.PUSH_TO_ECR } }
            steps {
                script {
                    withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDENTIAL_ID}") {
                        bat "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                        bat "python push_images.py \"${DOCKER_MANIFEST}\" \"${ECR_REGISTRY}\" \"${ECR_REPOSITORY}\""
                    }
                }
            }
        }

        stage('Upload JARs to S3') {
            when { expression { params.UPLOAD_JARS } }
            steps {
                script {
                    withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDENTIAL_ID}") {
                        bat "aws s3 cp D:\\MarketMapBuilds\\${params.RELEASE_VERSION}\\CombinedBuild s3://${ECR_REPOSITORY}/releases/${params.RELEASE_VERSION} --recursive"
                    }
                }
            }
        }

        stage('Summary') {
            steps {
                echo "Pipeline completed successfully!"
            }
        }
    }
}

def buildDockerImage(serviceName) {
    def jarPattern = "D:\\MarketMapBuilds\\${params.RELEASE_VERSION}\\CombinedBuild\\${serviceName}.*.jar"
    bat "dir /b \"${jarPattern}\" > jar_name.txt"
    def jarName = readFile('jar_name.txt').trim()
    def versionTag = jarName.replace("${serviceName}.", "").replace(".jar", "")

    echo "Using tag: ${versionTag} for ${serviceName}"

    bat """
        copy "D:\\MarketMapBuilds\\${params.RELEASE_VERSION}\\CombinedBuild\\${jarName}" "docker\\${serviceName}\\${serviceName}.jar" /Y
        cd docker\\${serviceName}
        docker build -t ${serviceName}:${versionTag} .
        echo ${serviceName}:${versionTag} >> "${env.DOCKER_MANIFEST}"
    """
}