pipeline {
    agent any

    environment {
        RELEASE_VERSION = "25.2.0"
        BUILD_PATH = "D:\\MarketMapBuilds\\${RELEASE_VERSION}"
        ECR_REGISTRY = "969258966375.dkr.ecr.eu-north-1.amazonaws.com"
        ECR_REPOSITORY = "marketmap-backend"
        S3_BUCKET = "s3://marketmap-artifacts/${RELEASE_VERSION}/"
    }

    stages {
        stage('Show Selections') {
            steps {
                script {
                    echo "========= Pipeline 2 Configuration ========="
                    echo "Build Services   : ${params.BUILD_SERVICES ?: 'true'}"
                    echo "Build SQL        : ${params.BUILD_SQL ?: 'true'}"
                    echo "Build Metadata   : ${params.BUILD_METADATA ?: 'true'}"
                    echo "Release Version  : ${RELEASE_VERSION}"
                    echo "Push to ECR      : ${params.PUSH_TO_ECR ?: 'true'}"
                    echo "Upload JARs      : ${params.UPLOAD_JARS ?: 'false'}"
                    echo "============================================"
                }
            }
        }

        stage('Prepare Workspace') {
            steps {
                bat """
                echo # Docker Build Manifest for RELEASE ${RELEASE_VERSION} > "${BUILD_PATH}\\DockerBuildInfo.txt"
                echo # Last Updated: %DATE% %TIME% >> "${BUILD_PATH}\\DockerBuildInfo.txt"
                """
            }
        }

        stage('Build Docker Image - Services') {
            steps {
                bat """
                for %%i in (${BUILD_PATH}\\CombinedBuild\\backend-webapi.*.jar) do (
                    copy "%%i" "${WORKSPACE}\\docker\\backend-webapi\\backend-webapi.jar" /Y
                )
                docker build -t backend-webapi:25.2.0.2007.58 "${WORKSPACE}\\docker\\backend-webapi"
                echo backend-webapi:25.2.0.2007.58 >> "${BUILD_PATH}\\DockerBuildInfo.txt"
                """
            }
        }

        stage('Build Docker Image - SQL') {
            steps {
                bat """
                for %%i in (${BUILD_PATH}\\CombinedBuild\\sql-service.*.jar) do (
                    copy "%%i" "${WORKSPACE}\\docker\\sql-service\\sql-service.jar" /Y
                )
                docker build -t sql-service:25.2.0.2007.63 "${WORKSPACE}\\docker\\sql-service"
                echo sql-service:25.2.0.2007.63 >> "${BUILD_PATH}\\DockerBuildInfo.txt"
                """
            }
        }

        stage('Build Docker Image - Metadata') {
            steps {
                bat """
                for %%i in (${BUILD_PATH}\\CombinedBuild\\metadata-service.*.jar) do (
                    copy "%%i" "${WORKSPACE}\\docker\\metadata-service\\metadata-service.jar" /Y
                )
                docker build -t metadata-service:25.2.0.2007.63 "${WORKSPACE}\\docker\\metadata-service"
                echo metadata-service:25.2.0.2007.63 >> "${BUILD_PATH}\\DockerBuildInfo.txt"
                """
            }
        }

        stage('Push Docker Images to ECR') {
            when { expression { return params.PUSH_TO_ECR == true } }
            steps {
                withAWS(region: 'eu-north-1', credentials: 'aws-jenkins-cred') {
                    bat """
                    aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                    python push_images.py "${BUILD_PATH}\\DockerBuildInfo.txt" "${ECR_REGISTRY}" "${ECR_REPOSITORY}"
                    """
                }
            }
        }

        stage('Upload JARs to S3') {
            when { expression { return params.UPLOAD_JARS == true } }
            steps {
                withAWS(region: 'eu-north-1', credentials: 'aws-jenkins-cred') {
                    bat """
                    aws s3 cp "${BUILD_PATH}\\CombinedBuild" ${S3_BUCKET} --recursive --exclude "*" --include "*.jar"
                    """
                }
            }
        }
    }

    post {
        success { echo "✅ Pipeline 2 executed successfully." }
        failure { echo "❌ Pipeline 2 failed." }
    }
}