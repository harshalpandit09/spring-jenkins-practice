pipeline {
    agent any

    parameters {
        booleanParam(name: 'BUILD_SERVICES',   defaultValue: false, description: 'Build Docker image for Backend-WebAPI (Services)')
        booleanParam(name: 'BUILD_SQL',        defaultValue: false, description: 'Build Docker image for SQL-Service')
        booleanParam(name: 'BUILD_METADATA',   defaultValue: false, description: 'Build Docker image for Metadata-Service')
        string(      name: 'RELEASE',          defaultValue: '25.2.0', description: 'Release version (e.g., 25.2.0)')
        booleanParam(name: 'PUSH_TO_REGISTRY', defaultValue: false, description: 'Push built Docker images to AWS ECR')
        booleanParam(name: 'UPLOAD_JARS',      defaultValue: false, description: 'Upload JARs to S3')
    }

    environment {
        BASE_DIR        = "D:\\MarketMapBuilds"
        RELEASE_DIR     = "${BASE_DIR}\\${params.RELEASE}\\CombinedBuild"
        DOCKER_DIR      = "${WORKSPACE}\\docker"
        DOCKER_MANIFEST = "${BASE_DIR}\\${params.RELEASE}\\DockerBuildInfo.txt"

        AWS_REGION    = "eu-north-1"
        ECR_REGISTRY  = "969258966375.dkr.ecr.${AWS_REGION}.amazonaws.com"
        ECR_REPO      = "marketmap-backend"
        S3_BUCKET     = "marketmap-jar-artifacts"
        AWS_CREDS     = "aws-jenkins"
    }

    stages {

        stage('Show Selections') {
            steps {
                script {
                    echo "========= Pipeline 2 Configuration ========="
                    echo "Build Services   : ${params.BUILD_SERVICES}"
                    echo "Build SQL        : ${params.BUILD_SQL}"
                    echo "Build Metadata   : ${params.BUILD_METADATA}"
                    echo "Release Version  : ${params.RELEASE}"
                    echo "Push to ECR      : ${params.PUSH_TO_REGISTRY}"
                    echo "Upload JARs      : ${params.UPLOAD_JARS}"
                    echo "============================================"
                }
            }
        }

        stage('Prepare Workspace') {
            steps {
                script {
                    if (!fileExists(RELEASE_DIR)) {
                        error("❌ Release folder does not exist: ${RELEASE_DIR}. Please run Pipeline 1 first.")
                    }
                    if (!params.BUILD_SERVICES && !params.BUILD_SQL && !params.BUILD_METADATA) {
                        echo "⚠ No components selected. Dry run only."
                        currentBuild.result = 'SUCCESS'
                        return
                    }
                    bat """
                        echo # Docker Build Manifest for RELEASE ${params.RELEASE} > "${DOCKER_MANIFEST}"
                        echo # Last Updated: %DATE% %TIME% >> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        stage('Build Docker Image - Services') {
            when { expression { params.BUILD_SERVICES } }
            steps {
                script {
                    bat "dir /b \"${RELEASE_DIR}\\backend-webapi.*.jar\" > jar_name.txt"
                    def jar = readFile('jar_name.txt').trim()
                    def tag = jar.replace('backend-webapi.', '').replace('.jar','')
                    echo "Using tag: ${tag} for backend-webapi"
                    bat """
                        copy "${RELEASE_DIR}\\${jar}" "${DOCKER_DIR}\\backend-webapi\\backend-webapi.jar" /Y
                        cd "${DOCKER_DIR}\\backend-webapi"
                        docker build -t backend-webapi:${tag} .
                        echo backend-webapi:${tag} >> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        stage('Build Docker Image - SQL') {
            when { expression { params.BUILD_SQL } }
            steps {
                script {
                    bat "dir /b \"${RELEASE_DIR}\\sql-service.*.jar\" > jar_name.txt"
                    def jar = readFile('jar_name.txt').trim()
                    def tag = jar.replace('sql-service.', '').replace('.jar','')
                    echo "Using tag: ${tag} for sql-service"
                    bat """
                        copy "${RELEASE_DIR}\\${jar}" "${DOCKER_DIR}\\sql-service\\sql-service.jar" /Y
                        cd "${DOCKER_DIR}\\sql-service"
                        docker build -t sql-service:${tag} .
                        echo sql-service:${tag} >> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        stage('Build Docker Image - Metadata') {
            when { expression { params.BUILD_METADATA } }
            steps {
                script {
                    bat "dir /b \"${RELEASE_DIR}\\metadata-service.*.jar\" > jar_name.txt"
                    def jar = readFile('jar_name.txt').trim()
                    def tag = jar.replace('metadata-service.', '').replace('.jar','')
                    echo "Using tag: ${tag} for metadata-service"
                    bat """
                        copy "${RELEASE_DIR}\\${jar}" "${DOCKER_DIR}\\metadata-service\\metadata-service.jar" /Y
                        cd "${DOCKER_DIR}\\metadata-service"
                        docker build -t metadata-service:${tag} .
                        echo metadata-service:${tag} >> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        stage('Push Docker Images to ECR') {
            when { expression { params.PUSH_TO_REGISTRY } }
            steps {
                withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDS}") {
                    script {
                        echo "Logging in to AWS ECR..."
                        bat """
                            aws ecr get-login-password --region ${AWS_REGION} ^
                                | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                        """

                        echo "Cleaning DockerBuildInfo.txt..."
                        bat """
                            findstr /V "#" "${DOCKER_MANIFEST}" > "${DOCKER_MANIFEST}.clean"
                            move /Y "${DOCKER_MANIFEST}.clean" "${DOCKER_MANIFEST}"
                        """

                        echo "Pushing valid images from DockerBuildInfo.txt..."
                        bat """
                            @echo off
                            setlocal enabledelayedexpansion
                            for /F "usebackq delims=" %%i in ("${DOCKER_MANIFEST}") do (
                                set IMAGE=%%i
                                set IMAGE=!IMAGE: =!
                                set TAG=!IMAGE::=-!
                                echo Tagging and pushing !IMAGE! -> ${ECR_REGISTRY}/${ECR_REPO}:!TAG!
                                docker tag !IMAGE! ${ECR_REGISTRY}/${ECR_REPO}:!TAG!
                                docker push ${ECR_REGISTRY}/${ECR_REPO}:!TAG!
                            )
                            endlocal
                        """
                    }
                }
            }
        }

        stage('Upload JARs to S3') {
            when { expression { params.UPLOAD_JARS } }
            steps {
                withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDS}") {
                    script {
                        echo "Uploading JAR files to S3..."
                        bat """
                            aws s3 cp "${RELEASE_DIR}" s3://${S3_BUCKET}/${params.RELEASE}/ --recursive ^
                                --exclude "*" --include "*.jar"
                        """
                    }
                }
            }
        }

        stage('List Built Docker Images') {
            steps {
                script {
                    echo "Listing Docker images for release ${params.RELEASE}..."
                    bat """
                        docker images | findstr ${params.RELEASE} || (
                          echo No images found.
                          exit /b 0
                        )
                    """
                }
            }
        }

        stage('Summary') {
            steps {
                echo "✅ Pipeline 2 completed successfully for Release: ${params.RELEASE}."
                echo "Docker build manifest stored at: ${DOCKER_MANIFEST}"
            }
        }
    }

    post {
        failure { echo "❌ Pipeline 2 failed." }
    }
}