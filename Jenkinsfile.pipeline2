pipeline {
    agent any

    parameters {
        string(name: 'RELEASE', defaultValue: '25.2.0', description: 'Release version (e.g., 25.1.0)')
        booleanParam(name: 'BUILD_SERVICES', defaultValue: false, description: 'Build Docker image for backend-webapi')
        booleanParam(name: 'BUILD_SQL', defaultValue: false, description: 'Build Docker image for sql-service')
        booleanParam(name: 'BUILD_METADATA', defaultValue: false, description: 'Build Docker image for metadata-service')
        booleanParam(name: 'PUSH_TO_REGISTRY', defaultValue: false, description: 'Push image to ECR?')
        booleanParam(name: 'UPLOAD_JARS', defaultValue: false, description: 'Upload .jars to S3?')
    }

    environment {
        BASE_DIR = "D:\\MarketMapBuilds"
        RELEASE_DIR = "${BASE_DIR}\\${params.RELEASE}\\CombinedBuild"
        DOCKER_DIR = "${WORKSPACE}\\docker"
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                script {
                    echo "Preparing workspace for Docker builds..."
                    if (!fileExists(RELEASE_DIR)) {
                        error "❌ Release folder does not exist: ${RELEASE_DIR}. Please run Pipeline 1 first."
                    }
                    if (!params.BUILD_SERVICES && !params.BUILD_SQL && !params.BUILD_METADATA) {
                        echo "⚠️ No components selected. Dry run only."
                        currentBuild.result = 'SUCCESS'
                        error "Dry run: No components selected."
                    }
                }
            }
        }

        stage('Build Docker Image - Services') {
            when { expression { params.BUILD_SERVICES } }
            steps {
                script {
                    echo "Building Docker image for backend-webapi..."
                    bat """
                        copy "${RELEASE_DIR}\\backend-webapi.*.jar" "${DOCKER_DIR}\\backend-webapi\\backend-webapi.jar" /Y
                        cd "${DOCKER_DIR}\\backend-webapi"
                        docker build -t backend-webapi:${params.RELEASE} .
                    """
                }
            }
        }

        stage('Build Docker Image - SQL') {
            when { expression { params.BUILD_SQL } }
            steps {
                script {
                    echo "Building Docker image for sql-service..."
                    bat """
                        copy "${RELEASE_DIR}\\sql-service.*.jar" "${DOCKER_DIR}\\sql-service\\sql-service.jar" /Y
                        cd "${DOCKER_DIR}\\sql-service"
                        docker build -t sql-service:${params.RELEASE} .
                    """
                }
            }
        }

        stage('Build Docker Image - Metadata') {
            when { expression { params.BUILD_METADATA } }
            steps {
                script {
                    echo "Building Docker image for metadata-service..."
                    bat """
                        copy "${RELEASE_DIR}\\metadata-service.*.jar" "${DOCKER_DIR}\\metadata-service\\metadata-service.jar" /Y
                        cd "${DOCKER_DIR}\\metadata-service"
                        docker build -t metadata-service:${params.RELEASE} .
                    """
                }
            }
        }

        stage('Push Docker Images to ECR (Placeholder)') {
            when { expression { params.PUSH_TO_REGISTRY } }
            steps {
                echo "Placeholder: Docker image push to AWS ECR will go here."
            }
        }

        stage('Upload JARs to S3 (Placeholder)') {
            when { expression { params.UPLOAD_JARS } }
            steps {
                echo "Placeholder: Uploading JAR files to S3 will go here."
            }
        }

        stage('Summary') {
            steps {
                echo "✅ Pipeline 2 completed successfully for Release: ${params.RELEASE}."
            }
        }
    }

    post {
        failure {
            echo "❌ Pipeline 2 failed."
        }
    }
}