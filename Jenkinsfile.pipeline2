pipeline {
    agent any

    parameters {
        booleanParam(name: 'BUILD_SERVICES', defaultValue: true, description: 'Build Services JAR')
        booleanParam(name: 'BUILD_SQL', defaultValue: true, description: 'Build SQL JAR')
        booleanParam(name: 'BUILD_METADATA', defaultValue: true, description: 'Build Metadata JAR')
        booleanParam(name: 'PUSH_TO_ECR', defaultValue: true, description: 'Push Docker Images to ECR')
        booleanParam(name: 'UPLOAD_JARS', defaultValue: true, description: 'Upload JARs to S3')
        string(name: 'RELEASE_VERSION', defaultValue: '25.2.0', description: 'Release Version')
    }

    environment {
        AWS_REGION = 'eu-north-1'
        ECR_REGISTRY = '969258966375.dkr.ecr.eu-north-1.amazonaws.com'
        ECR_REPO = 'marketmap-backend'
        BUILD_BASE_DIR = "D:\\MarketMapBuilds\\${params.RELEASE_VERSION}"
        DOCKER_MANIFEST = "${BUILD_BASE_DIR}\\DockerBuildInfo.txt"
        S3_BUCKET = 's3://marketmap-artifacts'
    }

    stages {

        stage('Show Selections') {
            steps {
                script {
                    echo "========= Pipeline 2 Configuration ========="
                    echo "Build Services   : ${params.BUILD_SERVICES}"
                    echo "Build SQL        : ${params.BUILD_SQL}"
                    echo "Build Metadata   : ${params.BUILD_METADATA}"
                    echo "Release Version  : ${params.RELEASE_VERSION}"
                    echo "Push to ECR      : ${params.PUSH_TO_ECR}"
                    echo "Upload JARs      : ${params.UPLOAD_JARS}"
                    echo "============================================"
                }
            }
        }

        stage('Prepare Workspace') {
            steps {
                script {
                    bat "echo # Docker Build Manifest for RELEASE ${params.RELEASE_VERSION} > \"${DOCKER_MANIFEST}\""
                    bat "echo # Last Updated: %date% %time% >> \"${DOCKER_MANIFEST}\""
                }
            }
        }

        stage('Build Docker Image - Services') {
            when { expression { params.BUILD_SERVICES } }
            steps {
                script {
                    bat """
                        dir /b "${BUILD_BASE_DIR}\\CombinedBuild\\backend-webapi.*.jar" > jar_name.txt
                        set /p JAR_NAME=<jar_name.txt
                        for /f "tokens=2 delims=." %%a in ('echo %JAR_NAME%') do set VERSION=%%a
                        echo Using tag: ${params.RELEASE_VERSION}.%VERSION% for backend-webapi
                        copy "${BUILD_BASE_DIR}\\CombinedBuild\\%JAR_NAME%" "docker\\backend-webapi\\backend-webapi.jar" /Y
                        cd docker\\backend-webapi
                        docker build -t backend-webapi:${params.RELEASE_VERSION}.%VERSION% .
                        echo backend-webapi:${params.RELEASE_VERSION}.%VERSION% >> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        stage('Build Docker Image - SQL') {
            when { expression { params.BUILD_SQL } }
            steps {
                script {
                    bat """
                        dir /b "${BUILD_BASE_DIR}\\CombinedBuild\\sql-service.*.jar" > jar_name.txt
                        set /p JAR_NAME=<jar_name.txt
                        for /f "tokens=2 delims=." %%a in ('echo %JAR_NAME%') do set VERSION=%%a
                        echo Using tag: ${params.RELEASE_VERSION}.%VERSION% for sql-service
                        copy "${BUILD_BASE_DIR}\\CombinedBuild\\%JAR_NAME%" "docker\\sql-service\\sql-service.jar" /Y
                        cd docker\\sql-service
                        docker build -t sql-service:${params.RELEASE_VERSION}.%VERSION% .
                        echo sql-service:${params.RELEASE_VERSION}.%VERSION% >> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        stage('Build Docker Image - Metadata') {
            when { expression { params.BUILD_METADATA } }
            steps {
                script {
                    bat """
                        dir /b "${BUILD_BASE_DIR}\\CombinedBuild\\metadata-service.*.jar" > jar_name.txt
                        set /p JAR_NAME=<jar_name.txt
                        for /f "tokens=2 delims=." %%a in ('echo %JAR_NAME%') do set VERSION=%%a
                        echo Using tag: ${params.RELEASE_VERSION}.%VERSION% for metadata-service
                        copy "${BUILD_BASE_DIR}\\CombinedBuild\\%JAR_NAME%" "docker\\metadata-service\\metadata-service.jar" /Y
                        cd docker\\metadata-service
                        docker build -t metadata-service:${params.RELEASE_VERSION}.%VERSION% .
                        echo metadata-service:${params.RELEASE_VERSION}.%VERSION% >> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        stage('Push Docker Images to ECR') {
            when { expression { params.PUSH_TO_ECR } }
            steps {
                withAWS(region: "${AWS_REGION}", credentials: 'aws-jenkins') {
                    script {
                        bat "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                        bat "python push_images.py \"${DOCKER_MANIFEST}\" \"${ECR_REGISTRY}\" \"${ECR_REPO}\""
                    }
                }
            }
        }

        stage('Upload JARs to S3') {
            when { expression { params.UPLOAD_JARS } }
            steps {
                withAWS(region: "${AWS_REGION}", credentials: 'aws-jenkins') {
                    script {
                        bat "aws s3 sync \"${BUILD_BASE_DIR}\\CombinedBuild\" \"${S3_BUCKET}/${params.RELEASE_VERSION}/\""
                    }
                }
            }
        }

        stage('Summary') {
            steps {
                echo "Pipeline 2 completed successfully."
            }
        }
    }

    post {
        failure {
            echo "‚ùå Pipeline 2 failed."
        }
    }
}