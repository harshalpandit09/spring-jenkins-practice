pipeline {
    agent any

    parameters {
        booleanParam(name: 'BUILD_SERVICES', defaultValue: true, description: 'Build backend-webapi Docker Image')
        string(name: 'RELEASE_VERSION', defaultValue: '25.2.0', description: 'Release Version')
        booleanParam(name: 'PUSH_TO_ECR', defaultValue: true, description: 'Push Docker Images to AWS ECR')
    }

    environment {
        BUILD_DIR = "D:\\MarketMapBuilds\\${params.RELEASE_VERSION}\\CombinedBuild"
        DOCKER_INFO = "D:\\MarketMapBuilds\\${params.RELEASE_VERSION}\\DockerBuildInfo.txt"
        AWS_ACCOUNT_ID = "969258966375"
        REGION = "eu-north-1"
        ECR_URL = "${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/marketmap-backend"
    }

    stages {
        stage('Show Selections') {
            steps {
                script {
                    echo "========= Test Pipeline ========="
                    echo "Build Services : ${params.BUILD_SERVICES}"
                    echo "Release Version: ${params.RELEASE_VERSION}"
                    echo "Push to ECR    : ${params.PUSH_TO_ECR}"
                    echo "================================="
                }
            }
        }

        stage('Prepare Workspace') {
            steps {
                bat """
                echo # Docker Build Manifest for RELEASE ${params.RELEASE_VERSION} > "${DOCKER_INFO}"
                echo # Last Updated: %date% %time% >> "${DOCKER_INFO}"
                """
            }
        }

        stage('Build Docker Image - Services') {
            when { expression { params.BUILD_SERVICES } }
            steps {
                script {
                    def jarName = bat(script: "dir /b \"${BUILD_DIR}\\backend-webapi.*.jar\"", returnStdout: true).trim()
                    if (!jarName) {
                        error "No backend-webapi JAR found in ${BUILD_DIR}"
                    }
                    def tag = jarName.replace("backend-webapi.", "").replace(".jar", "")
                    echo "Using tag: ${tag} for backend-webapi"

                    bat """
                    copy "${BUILD_DIR}\\${jarName}" "docker\\backend-webapi\\backend-webapi.jar" /Y
                    cd docker\\backend-webapi
                    docker build -t backend-webapi:${tag} .
                    echo backend-webapi:${tag} >> "${DOCKER_INFO}"
                    """
                }
            }
        }

        stage('Push Docker Images to ECR') {
            when { expression { params.PUSH_TO_ECR } }
            steps {
                withAWS(region: "${REGION}", credentials: 'aws-jenkins') {
                    bat """
                    aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_URL}
                    python push_images.py "${DOCKER_INFO}" "${ECR_URL}"
                    """
                }
            }
        }

        stage('Summary') {
            steps {
                echo "Test pipeline completed successfully!"
            }
        }
    }

    post {
        failure {
            echo "‚ùå Test pipeline failed."
        }
    }
}
