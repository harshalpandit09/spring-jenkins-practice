pipeline {
    agent any

    parameters {
        booleanParam(name: 'BUILD_SERVICES', defaultValue: true, description: 'Build Services')
        booleanParam(name: 'BUILD_SQL', defaultValue: true, description: 'Build SQL')
        booleanParam(name: 'BUILD_METADATA', defaultValue: true, description: 'Build Metadata')
        string(name: 'RELEASE_VERSION', defaultValue: '25.2.0', description: 'Release Version')
        booleanParam(name: 'PUSH_TO_ECR', defaultValue: true, description: 'Push images to AWS ECR')
        booleanParam(name: 'UPLOAD_JARS', defaultValue: false, description: 'Upload JARs to S3')
    }

    environment {
        AWS_REGION = 'eu-north-1'
        AWS_ACCOUNT_ID = '969258966375'
        ECR_BASE = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        DOCKER_BUILD_DIR = "D:\\MarketMapBuilds\\${params.RELEASE_VERSION}"
    }

    stages {

        stage('Show Selections') {
            steps {
                echo "========= Pipeline 2 Configuration ========="
                echo "Build Services   : ${params.BUILD_SERVICES}"
                echo "Build SQL        : ${params.BUILD_SQL}"
                echo "Build Metadata   : ${params.BUILD_METADATA}"
                echo "Release Version  : ${params.RELEASE_VERSION}"
                echo "Push to ECR      : ${params.PUSH_TO_ECR}"
                echo "Upload JARs      : ${params.UPLOAD_JARS}"
                echo "============================================"
            }
        }

        stage('Prepare Workspace') {
            steps {
                bat """
                    echo # Docker Build Manifest for RELEASE ${params.RELEASE_VERSION} > "${DOCKER_BUILD_DIR}\\DockerBuildInfo.txt"
                    echo # Last Updated: %date% %time% >> "${DOCKER_BUILD_DIR}\\DockerBuildInfo.txt"
                """
            }
        }

        stage('Build Docker Image - Services') {
            when { expression { return params.BUILD_SERVICES } }
            steps {
                bat """
                    for %%f in (${DOCKER_BUILD_DIR}\\CombinedBuild\\backend-webapi.*.jar) do (
                        set JAR_NAME=%%~nxf
                        set JAR_TAG=${params.RELEASE_VERSION}.2007.58
                        copy "%%f" docker\\backend-webapi\\backend-webapi.jar /Y
                        cd docker\\backend-webapi
                        docker build -t backend-webapi:%JAR_TAG% .
                        echo backend-webapi:%JAR_TAG% >> "${DOCKER_BUILD_DIR}\\DockerBuildInfo.txt"
                        cd ../..
                    )
                """
            }
        }

        stage('Build Docker Image - SQL') {
            when { expression { return params.BUILD_SQL } }
            steps {
                bat """
                    for %%f in (${DOCKER_BUILD_DIR}\\CombinedBuild\\sql-service.*.jar) do (
                        set JAR_NAME=%%~nxf
                        set JAR_TAG=${params.RELEASE_VERSION}.2007.63
                        copy "%%f" docker\\sql-service\\sql-service.jar /Y
                        cd docker\\sql-service
                        docker build -t sql-service:%JAR_TAG% .
                        echo sql-service:%JAR_TAG% >> "${DOCKER_BUILD_DIR}\\DockerBuildInfo.txt"
                        cd ../..
                    )
                """
            }
        }

        stage('Build Docker Image - Metadata') {
            when { expression { return params.BUILD_METADATA } }
            steps {
                bat """
                    for %%f in (${DOCKER_BUILD_DIR}\\CombinedBuild\\metadata-service.*.jar) do (
                        set JAR_NAME=%%~nxf
                        set JAR_TAG=${params.RELEASE_VERSION}.2007.63
                        copy "%%f" docker\\metadata-service\\metadata-service.jar /Y
                        cd docker\\metadata-service
                        docker build -t metadata-service:%JAR_TAG% .
                        echo metadata-service:%JAR_TAG% >> "${DOCKER_BUILD_DIR}\\DockerBuildInfo.txt"
                        cd ../..
                    )
                """
            }
        }

        stage('Push Docker Images to ECR') {
            when { expression { return params.PUSH_TO_ECR } }
            steps {
                bat """
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_BASE}
                    python push_images.py "${DOCKER_BUILD_DIR}\\DockerBuildInfo.txt" "${ECR_BASE}"
                """
            }
        }

        stage('Upload JARs to S3') {
            when { expression { return params.UPLOAD_JARS } }
            steps {
                bat """
                    aws s3 cp ${DOCKER_BUILD_DIR}\\CombinedBuild s3://marketmap-artifacts/${params.RELEASE_VERSION}/ --recursive
                """
            }
        }

        stage('Summary') {
            steps {
                echo "Pipeline completed for Release Version: ${params.RELEASE_VERSION}"
            }
        }
    }

    post {
        failure {
            echo "‚ùå Pipeline 2 failed."
        }
    }
}