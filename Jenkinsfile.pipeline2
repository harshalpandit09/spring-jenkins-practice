pipeline {
    agent any

    environment {
        AWS_REGION = 'eu-north-1'
        AWS_ACCOUNT_ID = '969258966375'
        RELEASE_VERSION = '25.2.0'
        DOCKER_MANIFEST = "D:\\MarketMapBuilds\\${RELEASE_VERSION}\\DockerBuildInfo.txt"
    }

    stages {
        stage('Show Selections') {
            steps {
                script {
                    echo "========= Pipeline 2 Configuration ========="
                    echo "Build Services   : ${params.BUILD_SERVICES}"
                    echo "Build SQL        : ${params.BUILD_SQL}"
                    echo "Build Metadata   : ${params.BUILD_METADATA}"
                    echo "Release Version  : ${RELEASE_VERSION}"
                    echo "Push to ECR      : ${params.PUSH_TO_ECR}"
                    echo "Upload JARs      : ${params.UPLOAD_JARS}"
                    echo "============================================"
                }
            }
        }

        stage('Prepare Workspace') {
            steps {
                script {
                    bat """
                        echo # Docker Build Manifest for RELEASE ${RELEASE_VERSION} > "${DOCKER_MANIFEST}"
                        echo # Last Updated: %date% %time% >> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        stage('Build Docker Image - Services') {
            when { expression { return params.BUILD_SERVICES == true } }
            steps {
                script {
                    bat """
                        dir /b "D:\\MarketMapBuilds\\${RELEASE_VERSION}\\CombinedBuild\\backend-webapi.*.jar" > jar_name.txt
                    """
                    def jarName = readFile('jar_name.txt').trim()
                    def tag = jarName.split("\\.")[1..-2].join('.')  // Extract version part
                    echo "Using tag: ${tag} for backend-webapi"
                    bat """
                        copy "D:\\MarketMapBuilds\\${RELEASE_VERSION}\\CombinedBuild\\${jarName}" "docker\\backend-webapi\\backend-webapi.jar" /Y
                        cd docker\\backend-webapi
                        docker build -t backend-webapi:${tag} .
                        echo backend-webapi:${tag} >> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        stage('Build Docker Image - SQL') {
            when { expression { return params.BUILD_SQL == true } }
            steps {
                script {
                    bat """
                        dir /b "D:\\MarketMapBuilds\\${RELEASE_VERSION}\\CombinedBuild\\sql-service.*.jar" > jar_name.txt
                    """
                    def jarName = readFile('jar_name.txt').trim()
                    def tag = jarName.split("\\.")[1..-2].join('.')
                    echo "Using tag: ${tag} for sql-service"
                    bat """
                        copy "D:\\MarketMapBuilds\\${RELEASE_VERSION}\\CombinedBuild\\${jarName}" "docker\\sql-service\\sql-service.jar" /Y
                        cd docker\\sql-service
                        docker build -t sql-service:${tag} .
                        echo sql-service:${tag} >> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        stage('Build Docker Image - Metadata') {
            when { expression { return params.BUILD_METADATA == true } }
            steps {
                script {
                    bat """
                        dir /b "D:\\MarketMapBuilds\\${RELEASE_VERSION}\\CombinedBuild\\metadata-service.*.jar" > jar_name.txt
                    """
                    def jarName = readFile('jar_name.txt').trim()
                    def tag = jarName.split("\\.")[1..-2].join('.')
                    echo "Using tag: ${tag} for metadata-service"
                    bat """
                        copy "D:\\MarketMapBuilds\\${RELEASE_VERSION}\\CombinedBuild\\${jarName}" "docker\\metadata-service\\metadata-service.jar" /Y
                        cd docker\\metadata-service
                        docker build -t metadata-service:${tag} .
                        echo metadata-service:${tag} >> "${DOCKER_MANIFEST}"
                    """
                }
            }
        }

        stage('Push Docker Images to ECR') {
            when { expression { return params.PUSH_TO_ECR == true } }
            steps {
                script {
                    bat """
                        aws configure set aws_access_key_id ${params.AWS_ACCESS_KEY}
                        aws configure set aws_secret_access_key ${params.AWS_SECRET_KEY}
                        aws configure set default.region ${AWS_REGION}
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                    """
                    bat """
                        python push_images.py "${DOCKER_MANIFEST}" "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                    """
                }
            }
        }

        stage('Upload JARs to S3') {
            when { expression { return params.UPLOAD_JARS == true } }
            steps {
                script {
                    bat """
                        aws s3 cp "D:\\MarketMapBuilds\\${RELEASE_VERSION}\\CombinedBuild" "s3://marketmap-deployments/${RELEASE_VERSION}/" --recursive
                    """
                }
            }
        }
    }

    post {
        success { echo '✅ Pipeline 2 completed successfully.' }
        failure { echo '❌ Pipeline 2 failed.' }
    }
}