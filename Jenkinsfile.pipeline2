pipeline {
    agent any

    parameters {
        booleanParam(name: 'BUILD_SERVICES', defaultValue: true, description: 'Build Services Docker Image')
        booleanParam(name: 'BUILD_SQL', defaultValue: true, description: 'Build SQL Docker Image')
        booleanParam(name: 'BUILD_METADATA', defaultValue: true, description: 'Build Metadata Docker Image')
        string(name: 'RELEASE_VERSION', defaultValue: '24.7.0', description: 'Release Version')
        booleanParam(name: 'PUSH_TO_ECR', defaultValue: true, description: 'Push Docker Images to AWS ECR')
        booleanParam(name: 'UPLOAD_JARS', defaultValue: false, description: 'Upload JARs to S3')
    }

    environment {
        BUILD_DIR = "D:\\MarketMapBuilds\\${params.RELEASE_VERSION}\\CombinedBuild"
        AWS_ACCOUNT_ID = "969258966375"
        REGION = "eu-north-1"
        EMAIL_RECIPIENTS = "harshalpandit09@gmail.com, sbmukhekar31@gmail.com"
    }

    stages {
        stage('Notify Pipeline Start') {
            steps {
                emailext(
                    to: "${EMAIL_RECIPIENTS}",
                    subject: "Pipeline 2 STARTED - ${params.RELEASE_VERSION}",
                    body: """
                        Hello Team,<br><br>
                        Jenkins pipeline <b>${currentBuild.displayName}</b> for release <b>${params.RELEASE_VERSION}</b> has <b>STARTED</b>.<br><br>
                        <b>Pipeline Details:</b><br>
                        Build Number : ${env.BUILD_NUMBER}<br>
                        Release      : ${params.RELEASE_VERSION}<br><br>
                        Regards,<br>
                        Jenkins
                    """,
                    mimeType: 'text/html'
                )
            }
        }

        stage('Show Selections') {
            steps {
                script {
                    echo "========= Pipeline Configuration ========="
                    echo "Build Services : ${params.BUILD_SERVICES}"
                    echo "Build SQL      : ${params.BUILD_SQL}"
                    echo "Build Metadata : ${params.BUILD_METADATA}"
                    echo "Release Version: ${params.RELEASE_VERSION}"
                    echo "Push to ECR    : ${params.PUSH_TO_ECR}"
                    echo "Upload JARs    : ${params.UPLOAD_JARS}"
                    echo "=========================================="
                }
            }
        }

        stage('Build & Push Docker Images') {
            steps {
                script {
                    def comps = []
                    if (params.BUILD_SERVICES) comps << 'backend-webapi'
                    if (params.BUILD_SQL) comps << 'sql-service'
                    if (params.BUILD_METADATA) comps << 'metadata-service'

                    if (comps.size() == 0) {
                        echo "⚠️ No components selected for build."
                        return
                    }

                    withAWS(region: "${REGION}", credentials: 'aws-jenkins') {
                        bat """
                        aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com
                        """

                        comps.each { comp ->
                            bat """
                            python build_push_backend.py ${comp} ${params.RELEASE_VERSION} ${params.PUSH_TO_ECR}
                            """
                        }
                    }
                }
            }
        }

        stage('Upload JARs to S3') {
    when { expression { params.UPLOAD_JARS } }
    steps {
        withAWS(region: "${REGION}", credentials: 'aws-jenkins') {
            script {
                // Check if bucket exists
                def bucketName = "marketmap-jar-artifacts"
                def releasePrefix = "${params.RELEASE_VERSION}/"

                bat """
                aws s3api head-bucket --bucket ${bucketName} 2>nul || aws s3 mb s3://${bucketName}
                """

                // Upload files to the release folder
                bat """
                aws s3 sync "${BUILD_DIR}" s3://${bucketName}/${releasePrefix}
                """
            }
        }
    }
}

        stage('Summary') {
            steps {
                echo "Pipeline completed successfully!"
            }
        }
    }

    post {
        success {
            emailext(
                to: "${EMAIL_RECIPIENTS}",
                subject: "Pipeline 2 SUCCESS - ${params.RELEASE_VERSION}",
                body: """
                    Hello Team,<br><br>
                    Jenkins pipeline <b>${currentBuild.displayName}</b> completed <b>SUCCESSFULLY</b>.<br><br>
                    <b>Build Details:</b><br>
                    Build Number : ${env.BUILD_NUMBER}<br>
                    Release      : ${params.RELEASE_VERSION}<br>
                    Start Time   : ${currentBuild.startTimeInMillis}<br>
                    Duration     : ${currentBuild.durationString}<br><br>
                    Regards,<br>
                    Jenkins
                """,
                mimeType: 'text/html',
                attachLog: false
            )
        }

        failure {
            emailext(
                to: "${EMAIL_RECIPIENTS}",
                subject: "Pipeline 2 FAILED - ${params.RELEASE_VERSION}",
                body: """
                    Hello Team,<br><br>
                    Jenkins pipeline <b>${currentBuild.displayName}</b> has <b>FAILED</b>.<br><br>
                    <b>Build Details:</b><br>
                    Build Number : ${env.BUILD_NUMBER}<br>
                    Release      : ${params.RELEASE_VERSION}<br>
                    Start Time   : ${currentBuild.startTimeInMillis}<br>
                    Duration     : ${currentBuild.durationString}<br><br>
                    Please check the attached log.<br>
                    Regards,<br>
                    Jenkins
                """,
                mimeType: 'text/html',
                attachLog: true
            )
        }
    }
}
