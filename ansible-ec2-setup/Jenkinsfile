pipeline {
    agent { label 'Windows-WSL-Agent' }  // Use your WSL-enabled Jenkins agent

    parameters {
        string(name: 'CLIENT', defaultValue: 'ClientA', description: 'Client Name')
        string(name: 'CLIENT_IP', defaultValue: '3.92.210.163', description: 'EC2 Public IP for the client')
        string(name: 'ENVIRONMENT', defaultValue: 'dev', description: 'Environment (dev/staging/prod)')
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                echo "Cleaning up old files in workspace..."
                // Delete the old inventory.ini if it exists
                bat 'del /Q /F "ansible-ec2-setup\\inventory.ini" 2>nul || echo No inventory.ini to delete'
            }
        }

        stage('Checkout Repository') {
            steps {
                echo "Checking out repository..."
                git branch: 'main', url: 'https://github.com/harshalpandit09/spring-jenkins-practice.git'
            }
        }

        stage('Prepare Inventory File') {
            steps {
                echo "Generating inventory.ini with CLIENT_IP=${params.CLIENT_IP}"
                // Run WSL shell to create inventory.ini inside Ubuntu and copy to workspace
                bat """
wsl -d Ubuntu-22.04 sh -c "echo '[ec2]' > /tmp/inventory.ini && \
echo '${params.CLIENT_IP} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/marketmap-key.pem' >> /tmp/inventory.ini && \
cat /tmp/inventory.ini && \
cp /tmp/inventory.ini '/mnt/d/DevOps/Devops_Project/JenkinsAgent/workspace/Pipeline 3 - EC2 Setup/ansible-ec2-setup/inventory.ini'" 
"""
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                echo "Running Ansible playbook..."
                // Run ansible-playbook inside WSL, using the generated inventory.ini
                bat """
wsl -d Ubuntu-22.04 sh -c "cd '/mnt/d/DevOps/Devops_Project/JenkinsAgent/workspace/Pipeline 3 - EC2 Setup/ansible-ec2-setup' && \
ansible-playbook -i inventory.ini setup-ec2.yml --extra-vars 'client=${params.CLIENT} environment=${params.ENVIRONMENT}'"
"""
            }
        }

        stage('Verify Installation') {
            steps {
                echo "Verifying installation on EC2 instance..."
                // Run SSH checks for Python, Docker, and /opt/marketmap directory
                bat """
wsl -d Ubuntu-22.04 sh -c "ssh -o StrictHostKeyChecking=no -i ~/.ssh/marketmap-key.pem ec2-user@${params.CLIENT_IP} \
'python3 --version && docker --version && ls -ld /opt/marketmap'"
"""
            }
        }
    }

    post {
        success {
            echo "Pipeline 3 completed successfully for client=${params.CLIENT} (${params.CLIENT_IP})"
        }
        failure {
            echo "Pipeline 3 failed! Check Ansible logs for details."
        }
    }
}
